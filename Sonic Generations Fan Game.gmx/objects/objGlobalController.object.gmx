<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>maskMain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /// ==== Initializate level ===== ///        
    // ---- First, room must have starting point, it's create Sonic!
    if (!instance_exists(objEngineStartPosition)) show_error("No starting point found", true);
    global.Player1 = instance_create(objEngineStartPosition.x, objEngineStartPosition.y, global.Target);
    global.Camera1 = instance_create(objEngineStartPosition.x, objEngineStartPosition.y, objCamera);    
    global.Camera1.ViewTarget   = 0;
    global.Camera1.CameraTarget = objPlayer;    
    instance_create(0, 0, objBackground);
        
    // --- Delete the starting point ------------------------------------
    with(objEngineStartPosition) instance_destroy();
    
    // --- Initializate everything -------------------------------------------
    sound_stop_all();
    if (global.ShowCard == 1) 
     {
     global.GameTime     = 0; 
     global.PerfectBonus = 1;
     }
    BoostTimer2     = global.Player1.BoostTimer;
    global.Rings    = 0;
    global.TimeLock = 0;
    global.MaxBoost = 100;
    RingsTimer     = 100;
    LivesTimer     = 100;
    AlphaTimer     = 100;
    BoostTimer     = 100;
    timeralpha     = 1;
    ringsalpha     = 1;
    livesalpha     = 1;
    boostalpha     = 1;
    
    // -- Translation -- //
    if ( room != RoomHub ) {
    if ( global.ShowCard == 1 ) {instance_create(0, 0, objStageIntro)} else {instance_create(0, 0, objTransitionFadeIn); global.ShiftStep = 0}
    }    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>objPauseMenu</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // == Load Records == //
    globalvar RecordTime, RecordTime2, RecordTime3, RecordScore, RecordRings, RecordRank, RedRing1, RedRing2, RedRing3, Completed;
    ini_open('lvldata.ini');
    RecordTime  = ini_read_real(global.Level,'Time',599999);
    RecordTime2 = ini_read_real(global.Level,'Time2',599999);
    RecordTime3 = ini_read_real(global.Level,'Time3',599999);
    RecordScore = ini_read_real(global.Level,'Score',0);
    RecordRings = ini_read_real(global.Level,'Rings',0);
    RecordRank  = ini_read_real(global.Level,'Rank',0);
    RedRing1    = ini_read_real(global.Level,'RedRing1',0);
    RedRing2    = ini_read_real(global.Level,'RedRing2',0);
    RedRing3    = ini_read_real(global.Level,'RedRing3',0);
    Completed   = ini_read_real(global.Level,'Completed',0);
    global.RedRing[1] = global.RedRing1;
    global.RedRing[2] = global.RedRing2;
    global.RedRing[3] = global.RedRing3;
    ini_close();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// ==== Manage object deactivation ======================================================
    
    // ==== Manage timer ====================================================================
    if (!instance_exists(fadeOutGameOver) &amp;&amp; !instance_exists(fadeOutDeath)) &amp;&amp; !(global.TimeLock) 
    {global.GameTime += 1000/60};
        
    if objPlayer.BoostTimer&lt;0 {objPlayer.BoostTimer=0; objPlayer.Boost=0}
    if objPlayer.BoostTimer&gt;global.MaxBoost {objPlayer.BoostTimer=global.MaxBoost}
    
    if BoostTimer2&gt;objPlayer.BoostTimer {BoostTimer2-=1/4};
    if BoostTimer2&lt;objPlayer.BoostTimer {BoostTimer2+=1/4};
    if BoostTimer2&gt;global.MaxBoost {BoostTimer2=objPlayer.BoostTimer};
    
    if (room == RoomHub) {objPlayer.BoostTimer=global.MaxBoost};   


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    if AlphaTimer &gt; 0 { AlphaTimer-=1 if (timeralpha)&lt;1 timeralpha+=1/12 } else { if (timeralpha)&gt;0 timeralpha-=1/6 }
    if LivesTimer &gt; 0 { LivesTimer-=1 if (livesalpha)&lt;1 livesalpha+=1/12 } else { if (livesalpha)&gt;0 livesalpha-=1/6 }
    if RingsTimer &gt; 0 { RingsTimer-=1 if (ringsalpha)&lt;1 ringsalpha+=1/12 } else { if (ringsalpha)&gt;0 ringsalpha-=1/6 }
    if BoostTimer &gt; 0 { BoostTimer-=1 if (boostalpha)&lt;1 boostalpha+=1/12 } else { if (boostalpha)&gt;0 boostalpha-=1/6 }
    if global.ShiftStep &gt; 0 {global.ShiftStep /= 1.2}
    
    if global.Rings = 0 { RingsTimer=50 }
    if objPlayer.Boost { BoostTimer=50 }
    if objPlayer.Ground=1 { if (abs(objPlayer.Speed)&lt;1) { RingsTimer=50 LivesTimer=50 AlphaTimer=50 BoostTimer=50 } }
    if room==RoomHub &amp;&amp; global.CompletedLevels == 0 { RingsTimer=0 LivesTimer=0 AlphaTimer=0 BoostTimer=0 };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.TypeHUD!=0 exit; 

        // Draw HUD counters
        draw_set_font(global.FntHUD);
        draw_set_color(c_white);
        draw_sprite_ext(sprHUD, 0, view_xview+10, view_yview+10,1,1,0,c_white,0.9);

        // Score
        draw_set_halign(fa_left);
        draw_set_font(global.FntHUDScore);
        scrDrawNumberZero(view_xview+52, view_yview+17, global.Score,8);   
        
        // Rings        
        draw_set_font(global.FntHUDRings);
        draw_set_halign(fa_center);
        if (global.Rings==0 &amp;&amp; floor((current_time/250)mod 2)==0) draw_set_color(c_red);
        scrDrawNumberZero(view_xview+26, view_yview+31, global.Rings, 3); 
        draw_set_color(c_white);  
  
        draw_sprite(sprSonicLives, 0, view_xview+15, view_yview+view_hview-19);   //Draw Lives Sprite     
        scrDrawNumberZero(view_xview+80, view_yview+view_hview-30, global.Lives, 3);                            

        draw_set_halign(fa_left);
        draw_set_font(global.FntHUDTime);
        scrDrawNumberZero(view_xview+105, view_yview+32,  (global.GameTime div 10)    mod 100, 2);    // Milliseconds
        draw_text(view_xview+96, view_yview+32, "::");
        scrDrawNumberZero(view_xview+80, view_yview+32,  (global.GameTime div 1000)  mod 60,  2);    // Seconds
        draw_text(view_xview+74, view_yview+32, ":");
        scrDrawNumberZero(view_xview+65, view_yview+32,  (global.GameTime div 60000) mod 60,  1);    // Minutes    
        
        if (instance_exists(objPlayerSonic))
        draw_sprite(sprBoostTimer,(global.Player1.BoostTimer)/4,view_xview+view_wview-10,view_yview+view_hview-10)    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.TypeHUD!=1 exit; 

        // Draw HUD counters
        draw_set_font(global.FntHUDRings);
        draw_set_color(c_white);
        draw_set_halign(fa_left);                       
        
        // Time counter
        draw_set_alpha(timeralpha);
        draw_sprite_ext(lostworldHUD, 1, view_xview[0]+25, view_yview[0]+30, 1, 1, 0, c_white, timeralpha);
        draw_text(view_xview+50,view_yview+30, string(floor(global.GameTime/60000))+":"+scrStringNumberFormat(floor(global.GameTime/1000) mod 60,2)+";"+scrStringNumberFormat(floor(global.GameTime/10) mod 100,2)); 
        draw_set_alpha(1);
        
        // Rings counter
        draw_set_alpha(ringsalpha);
        draw_sprite_ext(lostworldHUD, 0, view_xview[0]+25, view_yview[0]+56, 1, 1, 0, c_white, ringsalpha);
        if (global.Rings==0 &amp;&amp; floor((global.GameTime/250)mod 2)==0) draw_set_color(c_red);
        scrDrawNumberZero(view_xview+50, view_yview+55, global.Rings, 3);  
        draw_set_alpha(1);

        // Lives counter
        draw_set_color(c_white);
        draw_set_alpha(livesalpha);
        draw_sprite_ext(lostworldHUD, 2, view_xview[0]+25, view_yview[0]+80, 1, 1, 0, c_white, livesalpha);
        scrDrawNumberZero(view_xview+50, view_yview+80, global.Lives, 3);
        draw_set_alpha(1);
        
        // Boost counter
        draw_set_color(c_white);
        draw_set_alpha(boostalpha);
        if (instance_exists(objPlayerSonic)){
        draw_rectangle_color(view_xview[0]+40, view_yview[0]+view_hview[0]-30, view_xview[0]+40+(170), view_yview[0]+view_hview[0]-26, c_black, c_black, c_black, c_black, 0);
        draw_rectangle_color(view_xview[0]+40, view_yview[0]+view_hview[0]-30, view_xview[0]+39+(170/max(1,global.MaxBoost/max(1,BoostTimer2))), view_yview[0]+view_hview[0]-26, c_orange, c_orange, c_red, c_red, 0);
        draw_rectangle_color(view_xview[0]+40, view_yview[0]+view_hview[0]-30, view_xview[0]+39+(170/max(1,global.MaxBoost/max(1,objPlayer.BoostTimer))), view_yview[0]+view_hview[0]-26, c_lime, c_lime, c_green, c_green, 0);
        draw_sprite_ext(sprite240_hudboost, 0, view_xview[0]+40, view_yview[0]+view_hview[0]-30, 1, 1, 0, c_white, boostalpha);
        }
        draw_set_alpha(1);
                        
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.TypeHUD!=2 exit; 

        // Draw HUD counters
        draw_set_font(global.FntHUDGen);
        draw_set_color(c_white);
        draw_set_halign(fa_left);                       
        
        // Time counter
        draw_sprite(hudGen, 0, view_xview[0]-global.ShiftStep+17, view_yview[0]+40);  
        draw_text(view_xview[0]-global.ShiftStep+52, view_yview[0]+42, string(floor(global.GameTime/60000))+":"+scrStringNumberFormat(floor(global.GameTime/1000) mod 60,2)+";"+scrStringNumberFormat(floor(global.GameTime/10) mod 100,2)); 
       
        // Rings counter
        draw_sprite(hudGen, 1, view_xview[0]-global.ShiftStep+17, view_yview[0]+80);
        scrDrawNumberZero(view_xview[0]-global.ShiftStep+52, view_yview[0]+82, global.Rings, 3);  
        
        // Lives counter
        draw_sprite(hudGen, 2, view_xview[0]+view_wview[0]-79+global.ShiftStep, view_yview[0]+40);
        scrDrawNumberZero(view_xview[0]+view_wview[0]-42+global.ShiftStep, view_yview[0]+42, global.Lives, 2);
        
        // Boost counter
        if (instance_exists(objPlayerSonic)){
        draw_rectangle_color(view_xview[0]-global.ShiftStep+30, view_yview[0]+view_hview[0]-30, view_xview[0]-global.ShiftStep+30+(170), view_yview[0]+view_hview[0]-26, c_black, c_black, c_black, c_black, 0);
        draw_rectangle_color(view_xview[0]-global.ShiftStep+30, view_yview[0]+view_hview[0]-30, view_xview[0]-global.ShiftStep+29+(170/max(1,global.MaxBoost/max(1,BoostTimer2))), view_yview[0]+view_hview[0]-26, c_orange, c_orange, c_red, c_red, 0);
        draw_rectangle_color(view_xview[0]-global.ShiftStep+30, view_yview[0]+view_hview[0]-30, view_xview[0]-global.ShiftStep+29+(170/max(1,global.MaxBoost/max(1,objPlayer.BoostTimer))), view_yview[0]+view_hview[0]-26, c_lime, c_lime, c_green, c_green, 0);
        draw_sprite(sprite240_hudboost, 0, view_xview[0]-global.ShiftStep+30, view_yview[0]+view_hview[0]-30);
        }
       
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.TypeHUD!=3 exit; 

        // Draw HUD counters
        draw_set_font(global.FntHUDGen);
        draw_set_color(c_white);
        draw_set_halign(fa_left);                       
        
        // Time counter
        // Rings counter
        draw_set_alpha(timeralpha);
        draw_sprite_ext(hudHubWorld, 0, view_xview[0]+20, view_yview[0]+20, 1, 1, 0, c_white, timeralpha);  
        draw_sprite_ext(hudHubWorld, 1, view_xview[0]+view_wview[0]-145-20, view_yview[0]+20, 1, 1, 0, c_white, timeralpha); 
        scrDrawNumberZero(view_xview[0]+20+35, view_yview[0]+20+17, global.ShopPoints, 5);
        //scrDrawNumberZero(view_xview[0]+20+69, view_yview[0]+20+48, "00", 2);
        //scrDrawNumberZero(view_xview[0]+20+69, view_yview[0]+20+65, "00", 2);
        draw_sprite_ext(hudHubWorld, 2, view_xview[0]+20, view_yview[0]+view_hview[0]-50, 1, 1, 0, c_white, timeralpha);
        draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        // Draw player's trick counters
        if (objPlayerSonic.Action = 11 or objPlayerSonic.Action = 20) {
        if (!objPlayerSonic.TrickFinish) {
        draw_sprite(wordsTricks, 0, view_xview+view_wview/2-30, view_yview+100)
        draw_sprite(wordsTricks, 2, view_xview+view_wview/2, view_yview+160)
        draw_sprite(counterTricks, objPlayerSonic.TrickTimer, view_xview+view_wview/2+30, view_yview+100)
        }
        else {
        draw_sprite(wordsTricks, 1, view_xview+view_wview/2, view_yview+100)
        }
        }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
