<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>maskMain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>maskMain</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Variables ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ==== Setup player values =============================================================
    
    // ---- Character movement ----------------------------------------------------------

        // .... Movement values .........................................................
        Speed                   =   0;              // Horizontal Speed
        TopSpeed                =   10;             // Top Speed when running flat on the ground
        Acceleration            =   0.07    ;       // Acceleration 
        Deceleration            =   0.052675;       // Deceleration
        SlopeFactor             =   0.14;           // Slope Deceleration factor
        
        // .... Gravity values ..........................................................
        Gravity                 =   0;              // Vertical Speed
        GravityForce            =   0.21875;        // Strength of Gravity
        
        // .... Action values ...........................................................
        JumpStrength            =   -6.75;          // How much the player Jumps 
        JumpTimer               =   0;
        
        RollingDeceleration        = 0.03;
        RollingDecelerationBraking = 0.07;            
        RollingSlopeFactorUp       = 0.05;
        RollingSlopeFactorDown     = 0.20;

        SpinDashRev           = 0;
        SpinDashRevCharge     = 1;
        SpinDashRevLose       = 0.01;
        SpinDashMinSpeed      = 6;
        SpinDashMaxSpeed      = 12;
        
        SkidDeceleration      = 0.5;     
        
        CeilingLanding          =   false;  
        ActionTimer             =   0;  
        BoostTimer              =   0;  
        Lightdash               =   false;
        LightdashTarget         =   0;
        LightdashSpeed          =   14;             // Speed of Light Dash 
        
        Alpha = 1;

        // .... Action Constants ........................................................
        ActionDie              =  -2;
        ActionHurt             =  -1;
        ActionNormal           =   0;               
        ActionJumping          =   1;
        ActionCrouchDown       =   2;
        ActionLookUp           =   3;
        ActionRolling          =   4;
        ActionSpinDash         =   5;
        ActionPeelOut          =   6;
        ActionSkid             =   7;
        ActionCorkscrew        =   8;
        ActionCorkscrewRoll    =   9;
        ActionShoom            =   10;
        ActionTrick            =   11;
        ActionGrind            =   12;
        ActionSpring           =   13;
        ActionShield           =   14;
        ActionPush             =   15;
        ActionRotate           =   16;
        ActionFinish           =   17;
        ActionColorRing        =   18;
        ActionReaction         =   19;
        ActionPullUp           =   20;
        ActionPipe             =   21;
        ActionCloud            =   22;
        ActionGrab             =   23;
        ActionAltSpinDash      =   24;
        ActionAirDashing       =   25; 
        
        // .... Other values ............................................................
        ExtraLife               =   0;
        Ground                  =   true; 
        Boost                   =   0;
        //With this, Sonic don't will have boost energy when die after handle checkpoint
        if global.GetStart = 0 { 
        BoostTimer              =   50 
        };
        Homing                  =   0; 
        HomingMiss              =   0;         
        Action                  =   0;              
        Angle                   =   0;              
        Layer                   =   0;
        Shield                  =   0; // 1 = Normal, 2 = Fire, 3 = Thunder, 4 = Water
        ShieldUsable            =   0;
        FlagsOnScrew            =   false;
        
        Invincibility           =   0;
        InvincibilityTimer      =   0;
        SpeedSneakers           =   0;
        SpeedSneakersTimer      =   0;
        UnderWaterTimer         =   0;
        CorkYOffset = 18;
        
        LinkedCamera            =   noone;
        LinkedCameraShiftAmountX   = 0;
        LinkedCameraShiftAmountY   = 0;
        
        FlagsAllowMovement         = true;
        FlagsAllowX                = true;
        FlagsAllowY                = true;
        FlagsAllowCommonInput      = true;
        FlagsAllowDoubleJumpAction = true;
        FlagsAllowKeyboard         = true;
        
        start_trail(15);
        counter[0] = -1;

    // ---- Key data --------------------------------------------------------------------
    
        KeyLeft                =   0;
        KeyRight               =   0;
        KeyUp                  =   0;
        KeyDown                =   0;
        KeyAction              =   0;
        KeyMove                =   0;
        KeyBoost               =   0;
        
        KeyLeftPressed         =   0;
        KeyRightPressed        =   0;
        KeyUpPressed           =   0;
        KeyDownPressed         =   0;
        KeyActionPressed       =   0;
        KeyMovePressed         =   0;
        KeyBoostPressed        =   0;
        
        KeyUpTimer             =   0;
        KeyDownTimer           =   0;
        
        AssignedKeyLeft       =   vk_left;
        AssignedKeyRight      =   vk_right;
        AssignedKeyUp         =   vk_up;
        AssignedKeyDown       =   vk_down;
        AssignedKeyMove       =   ord('D');
        AssignedKeyAction     =   ord('A');
        AssignedKeyBoost      =   ord('S');

        
    // --- Animation Variables -----------------------------------------------------------
    
       scrPlayerAnimationClassicSonic();
       
    // --- Fix Start Position ---
    if( global.StartX == -1 &amp;&amp; global.StartY == -1) 
    {
      global.StartX = x;
      global.StartY = y;
    }

    x = global.StartX;
    y = global.StartY;
        
    // --- Init Effects -----------------------------------------------------------
     
       ps=part_system_create();
       pt=part_type_create();
       pe=part_emitter_create(ps)
       part_system_depth(ps, depth-1);
       part_type_shape(pt, 7);
       part_type_blend(pt, 1);
       part_type_alpha3(pt, 0.3, 0.3.5, 0.4);
       part_type_color3(pt, c_aqua, c_blue, c_aqua);
       part_type_direction(pt, 0, 360, 50, 0);
       part_type_speed(pt, 2, 3, 0.20, 0);
       part_type_gravity(pt, 0, 0)
       part_type_size(pt, 0.35, 0.35, 0, 0.20); 
       part_type_life(pt, 2.5, 2.5);
       part_type_orientation(pt, 0, 0, 0, 0, 0);
       part_type_scale(pt, 1, 1);  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Camera Positioning ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ==== Change camera's position ========================================================

    if (Action == ActionDie) exit;

    // ---- Activate all objects around player ----
    var _ActivationExtension;
    
    _ActivationExtension = max(abs(Speed), abs(Gravity));
    instance_activate_region(x-24-_ActivationExtension, y-24-_ActivationExtension, 48+_ActivationExtension*2, 48+_ActivationExtension*2, true);

    // Tilt the camera while crouched down
    if ( Action == ActionCrouchDown &amp;&amp; KeyDownTimer &gt;= 50 ) {LinkedCameraShiftAmountY = min(LinkedCameraShiftAmountY+2,100)}
    else if ( Action == ActionLookUp &amp;&amp; KeyUpTimer &gt;= 50 ) {LinkedCameraShiftAmountY = max(LinkedCameraShiftAmountY-2,-100)}
    else 
      {LinkedCameraShiftAmountY = scrLinearInterpolate(LinkedCameraShiftAmountY, 0, 0.1)};

    // Slide the camera while moving or spindashing
    if (Action == ActionSpinDash || Action == ActionAltSpinDash)
        LinkedCameraShiftAmountX = scrLinearInterpolate(LinkedCameraShiftAmountX, 80*AnimationDirection, 0.025);
    else LinkedCameraShiftAmountX = scrLinearInterpolate(LinkedCameraShiftAmountX, floor(Speed*12), 0.1);
    
    // End Step Code Platforms To Avoid Stuck
    var _ObjectHandle;

    _ObjectHandle = instance_nearest(x, y, objParentMovingPlatform);
     if (_ObjectHandle != noone) 
     {
         if (Ground == true &amp;&amp; scrPlayerCollisionBottomObject(x,y,Angle,maskMain,_ObjectHandle)) 
         {
        x += global.xDifference; 
        y += global.yDifference; 
         }
         else {
         global.MovingPlatformCheck = 0;
         }
     }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Animation Set ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === Animation System =================================================================

    // ---- If pressed, change direction ------------------------------------------------
    if (FlagsAllowCommonInput == true &amp;&amp; 
        ((Ground == true &amp;&amp; Action == ActionNormal) || 
        (Ground == false &amp;&amp; Action &gt;= ActionNormal))) 
    {
        if (KeyLeft)    AnimationDirection = -1;
        if (KeyRight)   AnimationDirection = 1;
    }
        
    if (Action == ActionGrind)
    {
        if (Speed&lt;0)  AnimationDirection = -1;
        if (Speed&gt;=0) AnimationDirection =  1;
    }

    // Set the correct Animation
    if ( Action == ActionNormal &amp;&amp; Ground == true ) 
    {
        if ( abs(Speed) &gt; 0.15 &amp;&amp; abs(Speed) &lt;= 5 &amp;&amp; Animation != "Walking" )
            Animation = "Walking";
        if ( abs(Speed) &gt; 5 &amp;&amp; abs(Speed) &lt;= 7.8 &amp;&amp; Animation != "FastWalk" )
            Animation = "FastWalk";
        if ( abs(Speed) &gt; 7.8 &amp;&amp; abs(Speed) &lt;= 10 &amp;&amp; Animation != "Running" )
            Animation = "Running";
        if ( abs(Speed) &gt; 10 &amp;&amp; abs(Speed) &lt;= 14 &amp;&amp; Animation != "FastRun" )
            Animation = "FastRun";  
        if ( abs(Speed) &gt; 14 &amp;&amp; Animation != "Dash" )
            Animation = "Dash";  
        if ( Speed == 0 &amp;&amp; Animation != "Idle" &amp;&amp; Animation != "IdleWait" &amp;&amp; Ground == true)
            Animation = "Idle";
                        
    } else {
        // The air animation has to be before the edge wobble so...
        if ( (Action == ActionNormal || Action == ActionSpring ) &amp;&amp; Ground = false &amp;&amp; Gravity &gt; 0 &amp;&amp; Animation != "Walking")
            Animation = "Walking";
        if ( (Action == ActionNormal || Action == ActionSpring ) &amp;&amp; Ground = false &amp;&amp; Gravity &lt; 0 &amp;&amp; Animation != "AirFlight" )
            Animation = "AirFlight";
            
        // Handle Edge Wobble
        if (AnimationDirection = 1)
        {
          if (Gravity&lt;1 &amp;&amp; scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; !scrPlayerCollisionRightLimiter(x,y,350) &amp;&amp; Speed = 0 &amp;&amp; Animation!="WobbleA") Animation="WobbleA";
          if (Gravity&lt;1 &amp;&amp; !scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; scrPlayerCollisionRightLimiter(x,y,350) &amp;&amp; Speed = 0 &amp;&amp; Animation!="WobbleB") Animation="WobbleB";
        }
        if (AnimationDirection = -1)
        {
          if (Gravity&lt;1 &amp;&amp; scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; !scrPlayerCollisionRightLimiter(x,y,350) &amp;&amp; Speed = 0 &amp;&amp; Animation!="WobbleB") Animation="WobbleB";
          if (Gravity&lt;1 &amp;&amp; !scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; scrPlayerCollisionRightLimiter(x,y,350) &amp;&amp; Speed = 0 &amp;&amp; Animation!="WobbleA") Animation="WobbleA";
        }
                    
        // Handle main Actions
        if ( Action == ActionJumping &amp;&amp; Animation != "Jump" )
            Animation = "Jump";
        if ( Action == ActionLookUp &amp;&amp; Animation != "LookUp" )
            Animation = "LookUp";
        if ( Action == ActionCrouchDown &amp;&amp; Animation != "CrouchDown" )
            Animation = "CrouchDown";
        if ( Action == ActionRolling &amp;&amp; Animation != "Rolling" )
            Animation = "Rolling";
        if ( Action == ActionSpinDash || Action == ActionAltSpinDash &amp;&amp; Animation != "SpinDash" )
            Animation = "SpinDash";
        if ( Action == ActionSkid &amp;&amp; Animation != "Skid" )
            Animation = "Skid";
        if ( Action == ActionTrick &amp;&amp; Animation != "Trick" )
            Animation = "Trick";
        if ( Action == ActionGrind &amp;&amp; Animation != "Grind")
            Animation = "Grind";
        if ( Action == ActionLightdash &amp;&amp; Animation != "Jump")
            Animation = "Jump";
        if ( Action == ActionCorkscrew &amp;&amp; Animation != "Corkscrew")
            Animation = "Corkscrew";
        if ( Action == ActionCorkscrewRoll &amp;&amp; Animation != "Rolling")
            Animation = "Rolling";
        if ( Action == ActionPeelOut &amp;&amp; Animation != "PeelOut" )
            Animation = "PeelOut";
        if ( Action == ActionHurt &amp;&amp; Animation != "Hurt")
            Animation = "Hurt";
        if ( Action == ActionDie &amp;&amp; Animation != "Die")
            Animation = "Die";
        if ( Action == ActionPush &amp;&amp; Animation != "Pushing" )
            Animation = "Pushing";
        if ( Action == ActionShield &amp;&amp; Animation != "Jump" )
            Animation = "Jump";
        if ( Action == ActionPipe &amp;&amp; Animation != "Jump" )
            Animation = "Jump";
        if ( Action == ActionGrab &amp;&amp; Animation != "Grab" )
            Animation = "Grab";
        if ( Action == ActionAirDashing &amp;&amp; Animation != "DashRingA" ){
            Animation = "DashRingA";
        if ( AnimationFrame &gt;= AnimationDashRingAEnd || Ground) {Action = ActionNormal}
    }
    }
    
    //Get rid of all glitches
    if (Animation = "Rolling" &amp;&amp; Action = ActionSkid) Animation = "Skid";
    if (Animation = "Jump" &amp;&amp; Action = ActionNormal &amp;&amp; !Ground) Animation = "Walking";
    if (CannonEffects == 1) Animation = "Jump";
    
    // Set Animation speed
    if (Action == ActionRolling  &amp;&amp; Animation == "Rolling")
        AnimationSpeed = 0.1+abs(Speed)/10;    

    if (Action == ActionSpinDash || Action == ActionAltSpinDash &amp;&amp; Animation == "SpinDash")
        AnimationSpeed = 0.1+abs(SpinDashRev)/25;  
        
    if (Action == ActionPeelOut &amp;&amp; Animation == "PeelOut")
        AnimationSpeed = 0.1+abs(SpinDashRev)/25;    
        
    if (Action == ActionJumping &amp;&amp; Animation == "Jump")
        AnimationSpeed = 0.19+abs(Speed)/25;   
        
    if (Animation == "Walking" &amp;&amp; Ground)
        AnimationSpeed = 0.15+abs(Speed)/25;

    if (Animation == "FastWalk" &amp;&amp; Ground)
        AnimationSpeed = 0.2+abs(Speed)/40;
        
    if (Animation == "Running" &amp;&amp; Ground)
        AnimationSpeed = 0.3+abs(Speed)/50;


    // Set correct Animation angle
    switch(Animation)
    {
        case "Jump":
        case "Spindash":
        case "Die":
        case "AirFlight":
                // interpolate new angle when on small angle changes (resolves thikering in slopes)
                if (abs(Angle-AnimationAngle)&lt;45) AnimationAngle = scrRotateTowardsAngle(Angle, AnimationAngle, max(1, abs(Speed)));
                else                               AnimationAngle = Angle;
            break;
        case "Rotate":
            AnimationAngle = 0;
            break;
        case "Running":
            if (Action == ActionCloud) {AnimationAngle = scrRotateTowardsAngle(AnimationAngle+(360*AnimationDirection), AnimationAngle, 6)}
            else if (Ground)
            {
                // interpolate new angle when on small angle changes (resolves thikering in slopes)
                if (abs(Angle-AnimationAngle)&lt;45) AnimationAngle = scrRotateTowardsAngle(Angle, AnimationAngle, max(1, abs(Speed)));
                else                               AnimationAngle = Angle;
            }
            else AnimationAngle = scrRotateTowardsAngle(0, AnimationAngle, 4);
            break;
        default:
            if (Ground)
            {
                // interpolate new angle when on small angle changes (resolves thikering in slopes)
                if (abs(Angle-AnimationAngle)&lt;45) AnimationAngle = scrRotateTowardsAngle(Angle, AnimationAngle, max(1, abs(Speed)));
                else                               AnimationAngle = Angle;
            }
            else AnimationAngle = scrRotateTowardsAngle(0, AnimationAngle, 4);
    }
    
    // Cal the main Animation System
    scrPlayerAnimationSystemCore();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Trail ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>update_trail(
floor(x)+cos(degtorad(Angle+90))*((string(objPlayer.Animation)!='Rolling'))+cos(degtorad(Angle))*Speed,
floor(y+2)-sin(degtorad(Angle+90))*((string(objPlayer.Animation)!='Rolling'))+Gravity-sin(degtorad(Angle))*Speed,
Homing || Action == ActionRolling || HomingMiss
)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>-- Steps Sound --</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Step Sounds
if (Ground)
{
if (floor(AnimationFrame)==3)  
|| (floor(AnimationFrame)==6)  
|| (floor(AnimationFrame)==9) 
|| (floor(AnimationFrame)==12) 
|| (floor(AnimationFrame)==41) 
|| (floor(AnimationFrame)==43) 
{if (!sound) {sound_play(choose(wlkGen1,wlkGen2,wlkGen3,wlkGen4,wlkGen5)) sound=1 alarm[5]=5}}
}

if (Action != ActionNormal &amp;&amp; Action != ActionPush) {
sound_stop(wlkGen1); sound_stop(wlkGen2);
sound_stop(wlkGen3); sound_stop(wlkGen4);
sound_stop(wlkGen5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (SpeedSneakers = 1)
{
Acceleration = 0.13375; 
TopSpeed = 18;
}
else 
{
Acceleration = 0.046875; 
TopSpeed = 9;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Get Keydata ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if FlagsAllowKeyboard == true
    {
    KeyLeft    =   keyboard_check( AssignedKeyLeft );
    KeyRight   =   keyboard_check( AssignedKeyRight );
    KeyUp      =   keyboard_check( AssignedKeyUp );
    KeyDown    =   keyboard_check( AssignedKeyDown );
    KeyAction  =   keyboard_check( AssignedKeyAction );
    KeyBoost   =   keyboard_check( AssignedKeyBoost );
    KeyMove    =   keyboard_check( AssignedKeyMove );
    
    KeyLeftPressed    =   keyboard_check_pressed( AssignedKeyLeft );
    KeyRightPressed   =   keyboard_check_pressed( AssignedKeyRight );
    KeyUpPressed      =   keyboard_check_pressed( AssignedKeyUp );
    KeyDownPressed    =   keyboard_check_pressed( AssignedKeyDown );
    KeyActionPressed  =   keyboard_check_pressed( AssignedKeyAction );
    KeyBoostPressed  =   keyboard_check_pressed( AssignedKeyBoost );
    KeyMovePressed  =   keyboard_check_pressed( AssignedKeyMove );
    
    if (KeyUp)      KeyUpTimer += 1;
    else            KeyUpTimer =  0;
    if (KeyDown)    KeyDownTimer += 1;
    else            KeyDownTimer =  0;
    }
    else
    {
    KeyLeft    =   0;
    KeyRight   =   0;
    KeyUp      =   0;
    KeyDown    =   0;
    KeyAction  =   0;
    KeyBoost   =   0;
    KeyMove    =   0;
    
    KeyLeftPressed    =   0;
    KeyRightPressed   =   0;
    KeyUpPressed      =   0;
    KeyDownPressed    =   0;
    KeyActionPressed  =   0;
    KeyBoostPressed  =   0;
    KeyMovePressed  =   0;

    if (Speed &gt; 0) { Speed -= Acceleration*4 }; 
    if (Speed &lt; 0) { Speed += Acceleration*4 };
    if (abs(Speed &lt; 0.3)) {Speed = 0;}
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Movement ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    // === Handle faint seperately ===
    if (Action==ActionDie) 
    {
     y += Gravity;
     FlagsAllowMovement = false;
     depth = -4096;
     exit;
    }
    
    if ( y &gt; room_height) {
    Action = ActionDie;
    sound_play(sndDie);
    Speed = 0;
    Gravity = -6;
    Ground = false;
    }
    
    // === Move on Speed Values ===
    if (FlagsAllowMovement == false) exit;            
    if (FlagsAllowX == true) {scrPlayerPerformSpeedMovement()};
    if (Ground == false) {if (FlagsAllowY==true) {scrPlayerPerformGravityMovement()};
    scrPlayerPerformLandingMovement();
    }
    if (Ground == true) {
    
        // FALL IF NOT ENOUGH SPEED
        if (Angle &gt; 85 &amp;&amp; Angle &lt; 275 &amp;&amp; abs(Speed) &lt; 1.3) {
            Gravity =   -sin(degtorad(Angle))*Speed;
            Speed   =   cos(degtorad(Angle))*Speed;
            Ground  =   false;
            Angle   =   0;
            break;
        }

        // SLOPES
        repeat (27)
            if (scrPlayerCollisionMain( x, y )) {
                    x   -=  sin(degtorad(Angle));
                    y   -=  cos(degtorad(Angle));
            } else break;    
        if (scrPlayerCollisionSlope( x, y, Angle, maskMid ) &amp;&amp; !scrPlayerCollisionMain( x, y ))
            repeat(27)
                if (!scrPlayerCollisionMain( x, y )) {
                    x   +=  sin(degtorad(Angle));
                    y   +=  cos(degtorad(Angle));
                } else break;
                
        // CHECK FOR NEW ANGLE                
        if (scrPlayerCollisionLeftLimiter( x, y, Angle ) &amp;&amp; scrPlayerCollisionRightLimiter( x, y, Angle )) { 
        Angle = scrPlayerCalculateAngle( x, y, Angle )};
         
       
        if (Angle != 0 &amp;&amp; (!scrPlayerCollisionLeftLimiter( x, y, Angle ) || !scrPlayerCollisionRightLimiter( x, y, Angle )))
        {
            Gravity =   -sin(degtorad(Angle))*Speed;
            Speed   =   cos(degtorad(Angle))*Speed;
            Ground  =   false;
            Angle   =   0;
        }
    }
    
    // === Fixing issue with stuck on the egde ===
    if (Gravity &gt; 0 &amp;&amp; Angle = 0 &amp;&amp; !scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; scrPlayerCollisionRightLimiter(x,y,5) &amp;&amp; Speed=0 &amp;&amp; Ground == false
        &amp;&amp; Action=0) {
        Speed -= 1;
        }                
    if (Gravity &gt; 0 &amp;&amp; Angle = 0 &amp;&amp; scrPlayerCollisionLeftLimiter(x,y,5) &amp;&amp; !scrPlayerCollisionRightLimiter(x,y,5) &amp;&amp; Speed=0 &amp;&amp; Ground == false
        &amp;&amp; Action=0) {
        Speed += 1;
        }
    
    
    // === Speed Cap === 
    Speed = min(20, abs(Speed)) * sign(Speed);     
       
    // === Breakable Terrains ===
        var tempHandle;
        if (Action == ActionJumping)
        {
            tempHandle = scrPlayerCollisionTopObject (x, y, Angle, maskBig, objParentItemBox);
            if (tempHandle &amp;&amp; Gravity &lt;= 0)
            {
                tempHandle.GravityForce = 0.2;
                tempHandle.Gravity = -4;
                sound_play(sndWaterAirAttack);
                Gravity =  -abs(Gravity);
                Ground  =  false;
            }
            tempHandle = scrPlayerCollisionBottomObject (x, y, Angle, maskBig, objParentItemBox);
            if (tempHandle &amp;&amp; Gravity &gt; 0)
            {
                tempHandle.TargetHandle = id;
                with(tempHandle) instance_destroy();
                Gravity =  -5;
                Ground  =  false;
            }
        }
        if (Action == ActionRolling || Action == ActionSpinDash || (Shield == 2 &amp;&amp; Action == ActionShield))
        {
            // Get if a monitor has collided with the player while rolling
            if (Speed &lt;= 0)      tempHandle = scrPlayerCollisionLeftObject (x, y, Angle, maskBig, objParentBreakableTerrain);
            else if (Speed &gt; 0)  tempHandle = scrPlayerCollisionRightObject(x, y, Angle, maskBig, objParentBreakableTerrain);

            // Destroy
            if (tempHandle != noone)
            {
                tempHandle.TargetHandle = id;
                with(tempHandle) instance_destroy();
            }
        }       
        
        // === Crumbling Platforms ===
        objHandle = instance_nearest(x,y,objParentCrumblingPlatform);
        if (Gravity = 0 &amp;&amp; scrPlayerCollisionBottomObject(x,y,Angle,maskBig,objHandle)) {
        if (!objHandle.FallActivated) {
          objHandle.FallActivated = true;
          sound_play(sndPlatformFall);
          }
        }
        

        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Object Handling ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === Receive Object Events ===
if (Action==ActionDie) exit;
scrPlayerHandleObjectsLayer();
scrPlayerHandleObjectsRing();
scrPlayerHandleObjectsSpring();
scrPlayerHandleObjectsBooster();
scrPlayerHandleObjectsSpike();
scrPlayerHandleObjectsMonitor();
scrPlayerHandleObjectsCheckPoint();
scrPlayerHandleObjectsInteractive();
scrPlayerHandleObjectsEnemy();
scrPlayerHandleObjectsTubes();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Input Management ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// --- Handle Faint -----------------------------------------------------------------
  if (Action==ActionDie) 
  {
    Gravity += GravityForce;
    global.Camera1.StopCamera = true;
    if (y&gt;=global.Camera1.y+240)
    if (id==global.Player1) 
    {
      // if the character is player 1.
      if (global.Lives&gt;0)  
        {
          if (!instance_exists(fadeOutDeath))
          { 
          Invincibility  =  0;
          SpeedSneakers  =  0;
          instance_create(x,y,fadeOutDeath);
          }
        } else {
          // game over
          if (!instance_exists(fadeOutGameOver)){ 
          instance_create(x,y,fadeOutGameOver);
          }
        }
        } else {
        // jump to player 1's position
        x = global.Player1.x;
        y = global.Player1.y-80;
        ExtraLife = 0;
        Speed = 0;
        Gravity = 0;
        Ground = false;
        Action = ActionSpring;
        Invincibility = 2;
        InvincibilityTimer = 120; 
        }
  exit;
  }    
    // ---- Speed input and management --------------------------------------------------
    
    if (FlagsAllowCommonInput==true) {
        // ---- Add acceleration while pressing ----------------------------------------
        if (Action != ActionRolling ) {
            if (KeyLeft  &amp;&amp; Speed&gt;-TopSpeed) Speed -= Acceleration;
            if (KeyRight &amp;&amp; Speed&lt;TopSpeed)  Speed += Acceleration;
        }
        // ---- Deceleration while no key is pressed -----------------------------------
        if (!KeyLeft &amp;&amp; Speed&lt;0 &amp;&amp; Ground &amp;&amp; Action != ActionRolling &amp;&amp; Action != ActionSkid) 
        {Speed = min(Speed+Deceleration, 0)};
        if (!KeyRight &amp;&amp; Speed&gt;0 &amp;&amp; Ground &amp;&amp; Action != ActionRolling &amp;&amp; Action != ActionSkid) 
        {Speed = max(Speed-Deceleration, 0)};        
    }
    
    // ---- Deceleration on slopes and full stop ----------------------------------------
    if (Ground &amp;&amp; Angle&gt;35 &amp;&amp; Angle&lt;335)
       {
            if ( Action == ActionRolling )
            {
                // first check where the character is heading to
                if ( Speed &gt; 0 )  // the character is heading to the right
                {
                    if ( Angle &lt; 180 ) 
                        // the character is going up a slope...
                        Speed -=  sin(degtorad(Angle)) * RollingSlopeFactorUp;
                    else                
                        // the character is going down a slope
                        Speed -=  sin(degtorad(Angle)) * RollingSlopeFactorDown;
                } else {            // the character is heading to the left
                    if ( Angle &gt; 180 ) 
                        // the character is going up a slope...
                        Speed -=  sin(degtorad(Angle)) * RollingSlopeFactorUp;
                    else                      
                        // the character is going down a slope
                        Speed -=  sin(degtorad(Angle)) * RollingSlopeFactorDown;            
                }
            } else {
                Speed -= sin(degtorad(Angle)) * SlopeFactor;
            }
       }

    
    // ---- Full stop when colliding with a wall ----
    if (Speed&gt;0 &amp;&amp; (scrPlayerCollisionRight(x,y,Angle,maskBig))) {
    Speed = 0;
    if (Ground = true &amp;&amp; KeyRight) {
    Action = ActionPush;
    FlagsAllowCommonInput = false;
    }
    }
    if (Speed&lt;0 &amp;&amp; (scrPlayerCollisionLeft(x,y,Angle,maskBig))) {
    Speed = 0;
    if (Ground = true &amp;&amp; KeyLeft) {
    Action = ActionPush;
    FlagsAllowCommonInput = false;
    }  
    }
    
    if (AnimationDirection = 1 &amp;&amp; Action = ActionPush &amp;&amp; !KeyRight) {
    Action = ActionNormal;
    FlagsAllowCommonInput = true;
    }
    if (AnimationDirection = -1 &amp;&amp; Action = ActionPush &amp;&amp; !KeyLeft) {
    Action = ActionNormal;
    FlagsAllowCommonInput = true;
    }
    
                //--------------------- y movement ---------------------
        if (Ground)
        {
            Gravity = 0;

            // return to the normal state if the character was jumping
            if (Action == ActionJumping || Action == ActionSpring || Action == ActionShoom || 
            ((Shield == 2 || Shield == 3) &amp;&amp; Action == ActionShield ) || Action == ActionTrick) Action = ActionNormal;
            else if (Shield == 4 &amp;&amp; Action == ActionShield)
            {
                Ground = false;
                Gravity = -6.5;
                Action = ActionJumping;
                sound_play(sndWaterAirAttack);
            }
            else if (Action == ActionHurt)
            {
                Speed = 0;
                Action = ActionNormal;
                FlagsAllowCommonInput = true;
            }
        }
        
        // check if the player is really on the Ground
        if (Ground == true &amp;&amp; scrPlayerCollisionBottom(x,y,Angle,maskBig) == false)
        {
            Gravity =   -sin(degtorad(Angle))*Speed;
            Speed   =   cos(degtorad(Angle))*Speed;
            Ground  =   false;
            Angle   =   0;
        }
        
        // check if for some reason the player has landed
        if (Gravity &gt;= 0 &amp;&amp; Ground == false &amp;&amp; scrPlayerCollisionBottom(x,y,Angle,maskBig) == true)
        {
            Ground      = true;
            Gravity     = 0;
                        
            // return to the normal state if the character was jumping
            if (Action == ActionJumping)
            {
                Action = ActionNormal;
            }
        }
        
        
        // check if we're on the air but we collided with the ceiling
        if (Gravity &lt; 0 &amp;&amp; Ground == false &amp;&amp; scrPlayerCollisionTop(x,y,Angle,maskBig) == true)
        {
            Gravity     = 0;
        }
        
        // and finally, if we aren't on the Ground, add the gravity to the Gravity
        if (Ground == false &amp;&amp; !instance_place(x,y,objAirDasher))
        {
            Gravity     += GravityForce;
        }

        //--------------------- Character Actions ---------------------        
        scrPlayerCSonicActions();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Game Play &amp; Effects ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Game Play
scrPlayerStatsGamePlay();

//Effects
if (abs(Speed) &gt; 14 &amp;&amp; SpeedSneakers != 1) instance_create(xprevious,yprevious,objClassicSonicAfterImage);
if (SpeedSneakers = 1) instance_create(xprevious,yprevious,objClassicSonicAfterImage);
if (Invincibility = 1 || CannonEffects = 1) instance_create(x,y,objInvincibleStars); 
if (Invincibility = 0) {
if (Shield = 2) instance_create(x,y,objShieldFireOrbs); 
if (Shield = 3) instance_create(x,y,objShieldThunderOrbs); 
if (Shield = 4) instance_create(x,y,objShieldWaterOrbs); 
}
if (Action == ActionJumping || Action == ActionSpinDash || Action == ActionRolling 
|| Action == ActionCorkscrewRoll || Lightdash == true) {
part_emitter_region(ps, pe, x, x, y+3, y+3, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(ps, pe, pt, 5);
}
if ( Action == ActionGrind ) {
spark=instance_create(x,y+13,effRailSpark)
spark.sprite_index=sprRailSpark
spark.speedX=sign(-Speed)*cos(degtorad(Angle))*2
spark.speedY=-random(4)*sin(degtorad(Angle+90))
spark.speedG=0.09
spark.imgsp=1/3
}
if ( Action == ActionSkid) {
if(counter[0]!=-1){
counter[0]-=1;}
if(counter[0]==-1){
instance_create(x-12*cos(degtorad(Angle+90)),y+9*sin(degtorad(Angle+90)),sfxSkidDust);
counter = 4;}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Giving +1 Life ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Rings&gt;=100 {if ExtraLife=0 {objGlobalController.LivesTimer = 150; ExtraLife=1; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=200 {if ExtraLife=1 {objGlobalController.LivesTimer = 150; ExtraLife=2; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=300 {if ExtraLife=2 {objGlobalController.LivesTimer = 150; ExtraLife=3; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=400 {if ExtraLife=3 {objGlobalController.LivesTimer = 150; ExtraLife=4; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=500 {if ExtraLife=4 {objGlobalController.LivesTimer = 150; ExtraLife=5; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=600 {if ExtraLife=5 {objGlobalController.LivesTimer = 150; ExtraLife=6; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=700 {if ExtraLife=6 {objGlobalController.LivesTimer = 150; ExtraLife=7; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=800 {if ExtraLife=7 {objGlobalController.LivesTimer = 150; ExtraLife=8; global.Lives += 1; instance_create(x,y,objGotLive)}}
if global.Rings&gt;=900 {if ExtraLife=8 {objGlobalController.LivesTimer = 150; ExtraLife=9; global.Lives += 1; instance_create(x,y,objGotLive)}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Draw. Here we call the drawing stuff. Of course, remember to use
    // floor(AnimationFrame) as the subframe index of the sprite, or
    // it might appear wrong
    
    if (Invincibility == 2)
    {
         if ((global.GameTime div 60) mod 2)
         {
         draw_sprite_ext(sprPlayerClassicSonic, floor(AnimationFrame), floor(x), floor(y), AnimationDirection, 1, AnimationAngle, c_white, Alpha);
         if Boost draw_sprite_ext(sprBoost, current_time div 180, floor(x), floor(y), 1, 1, point_direction(xprevious,yprevious,x,y), c_white, 0.6);
         }
    }
    else
    {   
        if (Invincibility != 1 &amp;&amp; Shield == 2 &amp;&amp; Action != ActionShield) draw_sprite(sprShieldFire, (global.GameTime div 60)*2+1, floor(x), floor(y));
        if (Invincibility != 1 &amp;&amp; Shield == 3) draw_sprite(sprShieldThunderB, global.GameTime div 65, floor(x), floor(y));
        draw_sprite_ext(sprPlayerClassicSonic, floor(AnimationFrame), floor(x), floor(y), AnimationDirection, 1, AnimationAngle, c_white, Alpha);
        if Boost draw_sprite_ext(sprBoost, current_time div 180, floor(x), floor(y), 1, 1, point_direction(xprevious,yprevious,x,y), c_white, 0.6);

        if (Invincibility != 1)
            switch(Shield)
            {
                case 1:
                    draw_sprite_ext(sprShieldNormal, global.GameTime div 60, floor(x), floor(y),AnimationDirection, 1, 0, c_white, 0.6);
                    break;
                case 2:
                    if (Action != ActionShield) draw_sprite(sprShieldFire, (global.GameTime div 60)*2, floor(x), floor(y));
                    else draw_sprite_ext(sprShieldFireAttack, global.GameTime div 60, floor(x), floor(y),AnimationDirection, 1, 0, c_white, 1);
                    break;
                case 3:
                    draw_sprite(sprShieldThunderA, global.GameTime div 65, floor(x), floor(y));
                    break;
                case 4:
                    if (Action != ActionShield) draw_sprite(sprShieldWater, global.GameTime div 60, floor(x), floor(y));
                    else draw_sprite_ext(sprShieldWaterAttack, 0, floor(x), floor(y),1, 1, 0, c_white, 1);
                    break;
            }
            else
        {
            //draw_sprite_ext(sprShieldInv, global.GameTime div 60, floor(x), floor(y),1,1,0,c_white,0.5);
        }
    }
    
    if (Action == ActionSpinDash || Action == ActionAltSpinDash || Action == ActionPeelOut) {
     if (SpinDashRev &lt; SpinDashMaxSpeed-4) {
     draw_sprite_ext(sprDashDust, floor(AnimationFrame), floor(x), floor(y), AnimationDirection, 1, AnimationAngle, c_white, 1)}
     else {
     draw_sprite_ext(sprMuchDashDust, floor(AnimationFrame), floor(x), floor(y), AnimationDirection, 1, AnimationAngle, c_white, 1)}
    }
    
    draw_set_color(c_blue); 
    draw_set_blend_mode(bm_add); 
    draw_trail(sprTrail, 20, true); 
    draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
