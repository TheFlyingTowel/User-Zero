<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRotatePole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objParentHoming</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Direction = 0;
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>rotatePolePart2</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Activated</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
 if (objPlayer.Action == objPlayer.ActionRotate)   
 {         
    Direction          += 8;
    objPlayer.Animation = "Rotate";
    objPlayer.Speed     = cos(degtorad(Direction))*3;
    objPlayer.Gravity   = sin(degtorad(Direction))*-3;
    
    objPlayer.x   = x;
    objPlayer.y   = y;
    
    objPlayer.AnimationAngle = 0;
    objPlayer.AnimationDirection = XDir;
    
      if (objPlayer.KeyActionPressed) {
         objPlayer.Action = 1
         sound_play(sndJumpSpinning);                          
           if Direction &gt; 100 &amp;&amp; Direction &lt; 300
           {
           objPlayer.Speed     = cos(degtorad(Direction))*5*XDir;
           objPlayer.Gravity   = sin(degtorad(Direction))*-5;
           }
           else
           {
           objPlayer.Speed     = cos(degtorad(Direction))*11*XDir;
           objPlayer.Gravity   = sin(degtorad(Direction))*-11;
           }
         alarm[0]            = 10;
         }
      if (objPlayer.KeyBoostPressed) {
         objPlayer.Action = 1;
         objPlayer.Boost = 1;
         sound_play(sndJumpSpinning);
           if Direction &gt; 100 &amp;&amp; Direction &lt; 300
           {
           objPlayer.Speed     = cos(degtorad(Direction))*6*XDir;
           objPlayer.Gravity   = sin(degtorad(Direction))*-6;
           }
           else
           {
           objPlayer.Speed     = cos(degtorad(Direction))*14*XDir;
           objPlayer.Gravity   = sin(degtorad(Direction))*-14;
           }
         alarm[0]            = 10;
         }
         
    Time += 1;
    if Time&gt;50 {if !(sound_isplaying(sndPoleSwing)) sound_play(sndPoleSwing); Time = 0}

 }
 if Direction &gt; 360 {Direction = 0};
 if Direction &lt; 0 {Direction = 360};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (objPlayer.Action==objPlayer.ActionRotate) {draw_sprite_ext(sprRotatingPoleGauge, 0, x, y, objPlayer.AnimationDirection, 1, 0, c_white, 1)};
draw_sprite(sprRotatePole, 0, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
