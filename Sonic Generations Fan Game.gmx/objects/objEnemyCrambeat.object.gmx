<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCrabmeat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objParentEnemy</parentName>
  <maskName>maskMain</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // ---- Movement variables ------------------------------------------------------
    scrObjectMotionInitialize(27, 27, 13, 13, 13, 4);
    
    Speed        = 1;
    Acceleration = 0.2;
    TopSpeed     = 5;

    Gravity      = 0;
    GravityForce = 0.2;
    TopGravity   = 5;

    Ground = 1;
    boost  = 5;
    drop   = 3;
    image_speed = 1/3;
    scrap = sprCrambeatScraps;
    
    // --- Allocate default animation variables --------------------------------------
    animation           = "idle"; // Character's actual animation. This is the one
                                  // you have to change. 
                                  
    animation_previous  = "";     // This one is used to check if the animation
                                  // has changed (if the previous anim isn't the same as
                                  // the new.)

    animation_frame     = 0;      // Actual frame on the animation
    animation_start     = 0;      // This is the start frame of the actual animation
    animation_end       = 0;      // This is the end frame of the actual animation
    animation_loop      = 0;
    animation_speed     = 0;      // This is the speed of the actual animation
    animation_repeat    = 0;      // Set this to true if you want the animation to repeat
    animation_linked_to = "nothing" // This is the name of the animation wich actual is linked to
    animation_direction = 1;
    
    animation_flags_changed  = 0;  // These flags are used if you want to track down
    animation_flags_finished = 0;  // the animations. For example if it has changed,
                                  // or if it has finished.
    
    // --- Allocate animations -------------------------------------------------------
    
    // Idle animation
    animation_idle_start  = 0;
    animation_idle_end    = 14;
    animation_idle_loop   = 0;
    animation_idle_speed  = 0.13;
    animation_idle_repeat = true;
    animation_idle_linked_to = "(none)";

    animation_walk_start  = 15;
    animation_walk_end    = 17;
    animation_walk_loop   = 15;
    animation_walk_speed  = 0.15;
    animation_walk_repeat = true;
    animation_walk_linked_to = "(none)";
    
    animation_attack_start  = 3;
    animation_attack_end    = 10;
    animation_attack_loop   = 3;
    animation_attack_speed  = 0.16;
    animation_attack_repeat = true;
    animation_attack_linked_to = "(none)";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        
        if ( distance_to_object(objPlayer) &lt; 90 )
            {if animation != "idle" animation = "idle" Speed = 0; if x&gt;objPlayer.x {animation_direction=-1} else if x&lt;objPlayer.x{animation_direction=1} }  
        else {
        if Speed &gt; 0 animation_direction=1 else animation_direction=-1    
         if animation != "walk" {animation = "walk" Speed = animation_direction/3;}}
            
        if (animation_frame&gt;9 and animation_frame&lt;9.15) 
        {
        if !a {a=instance_create(x-7,y+1,objCRocket)
        a.direction=0; a.f_directon=0; a.targ=instance_nearest(x,y,objPlayer); a=0}
        if !b {b=instance_create(x+7,y+1,objCRocket2)
        b.targ=instance_nearest(x,y,objPlayer); b=0}
        }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /* This is the actual core of the animation system. Here we check if the
    ** animation has changed, and if then, put the new animation.
    **
    ** Thanks to the nature of the actual system this part is rather
    ** simple, thanks to how powerful is Gamemaker :D
    */
    
    // Set changed flag to false
    animation_flags_changed = false;
    
    // First check if the actual animation has changed
    if ( animation != animation_previous )
    {
        // If the animation was changed, set previous to the new one
        animation_previous = animation; 
        
        // Now is when we get the data of the new animation. Since the
        // animation is handled using an string, we need to get
        // the animation local variable acording to that string.
        //
        // For this, we use the function variable_local_get(), wich
        // returns the value of the local variable string passed.
        
        animation_start     = variable_local_get("animation_"+animation+"_start");
        animation_end       = variable_local_get("animation_"+animation+"_end");
        animation_loop      = variable_local_get("animation_"+animation+"_loop");
        animation_speed     = variable_local_get("animation_"+animation+"_speed");
        animation_repeat    = variable_local_get("animation_"+animation+"_repeat");
        animation_linked_to = variable_local_get("animation_"+animation+"_linked_to");

        
        // Easy huh? We only had to concatenate some strings to get the final names.
        // Now that we have all the basic information, set the actual frame to
        // the start
        animation_frame = animation_start;
        
        // Set flags
        animation_flags_changed  = true;    // Set the changed flag to true
        animation_flags_finished = false;   // Set to false the finished flag
    }
    
    // And now the rest is easy. Add the speed to the frame and then
    // check if the animation reached to the end.
    if ( animation_flags_finished == false )
    {
        animation_frame += animation_speed;
        if ( floor(animation_frame) &gt; animation_end )
        {
            // Do we have to repeat?
            if ( animation_repeat == true )
            {
                // Loop back to the loop frame
                animation_frame = animation_loop;
            } else {
                animation_frame          = animation_end;               
                if ( animation_linked_to != "(none)" ) animation = animation_linked_to;
                else 
                    // Set to true the animation finished flag
                    animation_flags_finished = true;
            }
        } 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // Motion
    scrObjectMotionStep();
        
    // ---- Deacceleration on slopes ------------------------------------
    if (Ground == true)
        {
            Speed -= sin(degtorad(Angle)) * SlopeFactor;
        }
        
    // when we're colliding a wall
    if (Speed &gt; 0 &amp;&amp; scrPlayerCollisionRight(x,y,0,maskBig))
        {
            Speed = -Speed;
        }
    if (Speed &lt; 0 &amp;&amp; scrPlayerCollisionLeft(x,y,0,maskBig))
        {
            Speed = -Speed;
        } 
        
    // when we're colliding a wall
    if (Speed &gt; 0 &amp;&amp; place_meeting(x,y,objEnemySensorGoLeft))
        {
            Speed = -Speed;
        }
    if (Speed &lt; 0 &amp;&amp; place_meeting(x,y,objEnemySensorGoRight))
        {
            Speed = -Speed;
        } 
        
    if Speed&gt;=0 {image_xscale = 1} else {image_xscale = -1};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> draw_sprite_ext(sprCrabmeat, floor(animation_frame), floor(x), floor(y), animation_direction, 1, angle, c_white, 1);
 if (animation = "idle") draw_sprite(iconSeeking, current_time div 70, x, y-25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
