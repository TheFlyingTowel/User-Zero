<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>maskMain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>maskMain</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Variables ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ==== Setup player values =============================================================
    
    // ---- Character movement ----------------------------------------------------------

        // .... Movement values .........................................................
        Speed                   =   0;              // Horizontal Speed
        TopSpeed                =   9;              // Top Speed when running flat on the ground
        Acceleration            =   0.046875;       // Acceleration 
        Deceleration            =   0.046675;       // Deceleration
        SlopeFactor             =   0.14;           // Slope Deceleration factor
        
        // .... Gravity values ..........................................................
        Gravity                 =   0;              // Vertical Speed
        GravityForce            =   0.21875;        // Strength of Gravity
        
        // .... Action values ...........................................................
        JumpStrength            =   -6.25;             // How much the player Jumps 
        JumpTimer               =   0;

        // .... Action Constants ........................................................
        ActionDie              =  -2;
        ActionHurt             =  -1;
        ActionNormal           =   0;               
        ActionJumping          =   1;
        ActionCrouchDown       =   2;
        ActionLookUp           =   3;
        
        // .... Other values ............................................................
        AnimationDirection      =   1;
        
        Ground                  =   true;           
        Action                  =   0;              
        Angle                   =   0;              
        Layer                   =   0;
        
        LinkedCamera            =   noone;
        LinkedCameraShiftAmountX   = 0;
        LinkedCameraShiftAmountY   = 0;
        
        FlagsAllowMovement         = true;
        FlagsAllowX                = true;
        FlagsAllowY                = true;
        FlagsAllowCommonInput      = true;
        FlagsAllowDoubleJumpAction = true;

    // ---- Key data --------------------------------------------------------------------
    
        KeyLeft                =   0;
        KeyRight               =   0;
        KeyUp                  =   0;
        KeyDown                =   0;
        KeyAction              =   0;
        
        KeyLeftPressed         =   0;
        KeyRightPressed        =   0;
        KeyUpPressed           =   0;
        KeyDownPressed         =   0;
        KeyActionPressed       =   0;
        
        KeyUpTimer             =   0;
        KeyDownTimer           =   0;
        
        AssignedKeyLeft       =   vk_left;
        AssignedKeyRight      =   vk_right;
        AssignedKeyUp         =   vk_up;
        AssignedKeyDown       =   vk_down;
        AssignedKeyAction     =   vk_space;
        </string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GravityForce=0.21875;
CannonEffects=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ==== Change camera's position ========================================================

    if (LinkedCamera == noone) exit;
    
    // ---- Activate all objects around player ----
    var _ActivationExtension;
    
    _ActivationExtension = max(abs(Speed), abs(Gravity));
    instance_activate_region(x-24-_ActivationExtension, y-24-_ActivationExtension, 48+_ActivationExtension*2, 48+_ActivationExtension*2, true);

    // ---- Set camera panning ----
    // Pan up
    if (Action == ActionLookUp &amp;&amp; KeyUpTimer&gt;80) {
        if (LinkedCameraShiftAmountY&gt;-(view_hview/2)) 
            LinkedCameraShiftAmountY -= 2;
    }

    // Pan down
    else if (Action == ActionCrouchDown &amp;&amp; KeyDownTimer&gt;80) {
        if (LinkedCameraShiftAmountY&lt;(view_hview/2)) 
            LinkedCameraShiftAmountY += 2;
    }

    // Gradually return to normal
    else {
        if (LinkedCameraShiftAmountY&gt;0) 
            LinkedCameraShiftAmountY -= 2;
        if (LinkedCameraShiftAmountY&lt;0) 
            LinkedCameraShiftAmountY += 2;
    }

    // ---- Set new position ----
    LinkedCamera.x = floor(scrLinearInterpolate(x+LinkedCameraShiftAmountX, LinkedCamera.x, 0.8));
    LinkedCamera.y = floor(scrLinearInterpolate(y+LinkedCameraShiftAmountY, LinkedCamera.y, 0.8));
    
    // ---- Set Animation Direction ----
    if (KeyLeft)  AnimationDirection = -1;
    if (KeyRight) AnimationDirection = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Get Keydata ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /* Get input data. Store them on variables for tracking them down
       easier :)
    */
    
    KeyLeft    =   keyboard_check( AssignedKeyLeft );
    KeyRight   =   keyboard_check( AssignedKeyRight );
    KeyUp      =   keyboard_check( AssignedKeyUp );
    KeyDown    =   keyboard_check( AssignedKeyDown );
    KeyAction  =   keyboard_check( AssignedKeyAction );
    
    KeyLeftPressed    =   keyboard_check_pressed( AssignedKeyLeft );
    KeyRightPressed   =   keyboard_check_pressed( AssignedKeyRight );
    KeyUpPressed      =   keyboard_check_pressed( AssignedKeyUp );
    KeyDownPressed    =   keyboard_check_pressed( AssignedKeyDown );
    KeyActionPressed  =   keyboard_check_pressed( AssignedKeyAction );
    
    if (KeyUp)      KeyUpTimer += 1;
    else            KeyUpTimer =  0;
    if (KeyDown)    KeyDownTimer += 1;
    else            KeyDownTimer =  0;</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Movement ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // movement control
    
    // === Move on Speed Values ===    
    if (FlagsAllowX == true) 
    {
      scrPlayerPerformSpeedMovement(); // Horizontal Movement
    }
    
    if (Ground==false) 
    {
      if (FlagsAllowY==true) 
      {
        scrPlayerPerformGravityMovement(); // Vertical Movement
      }
      scrPlayerPerformLandingMovement(); // Landing
    }
        
    // === Slopes ===       
        if (Ground == true)
        {
            if ( scrPlayerCollisionMain( x, y ) )
            {
                do
                {
                    x   -=  sin(degtorad(Angle));
                    y   -=  cos(degtorad(Angle));
                } until ( !scrPlayerCollisionMain( x, y ) )
            }
            if ( scrPlayerCollisionSlope( x, y, Angle, maskMid ) &amp;&amp; !scrPlayerCollisionMain( x, y ) )
            {
                do
                {
                    x   +=  sin(degtorad(Angle));
                    y   +=  cos(degtorad(Angle));
                } until ( scrPlayerCollisionMain( x, y ) )
            }
        }

        // === Other ===
        
        // === Fall if there isn't enough Speed ===
        if (Angle &gt; 75 &amp;&amp; Angle &lt; 275 &amp;&amp; abs(Speed) &lt; 1.3)
        {
            Gravity =   -sin(degtorad(Angle))*Speed;
            Speed =   cos(degtorad(Angle))*Speed;
            Ground  =   false;
        }
        
        // === Fall off the Ground if the edges aren't colliding ===
        if (Ground == true &amp;&amp; Angle != 0 &amp;&amp;
            (scrPlayerCollisionLeftLimiter( x, y, Angle ) == false || scrPlayerCollisionRightLimiter( x, y, Angle ) == false  ))
        {
            Gravity =   -sin(degtorad(Angle))*Speed;
            Speed =   cos(degtorad(Angle))*Speed;
            Ground  =   false;
        }        
        
        // === Check for new Angle ===
        if (Ground == true &amp;&amp; scrPlayerCollisionLeftLimiter( x, y, Angle ) &amp;&amp; scrPlayerCollisionRightLimiter( x, y, Angle ))
        {
            Angle   =   scrPlayerCalculateAngle( x, y, Angle );
        } else {
            Angle   =   0;
        }</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Object Handling ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === Receive Object Events ===
scrPlayerHandleObjectsLayer();</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--- Input Management ---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
        //--------------------- x movement ---------------------
        if (FlagsAllowCommonInput == true)
        {
        // acceleration
        if (KeyLeft &amp;&amp; Speed &gt; -TopSpeed)  Speed -= Acceleration;
        if (KeyRight &amp;&amp; Speed &lt; TopSpeed)  Speed += Acceleration;
        
        // deacceleration while no key is pressed
        if (!KeyLeft &amp;&amp; Speed &lt; 0)
        {
            Speed += Acceleration;
            // set to 0 when we full stop (this is performed due the floating point precision, otherwise some odd
            // decimals will still remain in there)
            if (Speed &gt; 0) Speed  = 0;
        }
        
        if (!KeyRight &amp;&amp; Speed &gt; 0)
        {
            Speed -= Acceleration;
            // set to 0 when we full stop (this is performed due the floating point precision, otherwise some odd
            // decimals will still remain in there)            
            if (Speed &lt; 0) Speed = 0;
        }    
        }
        
        // deacceleration on slopes
        if  (Ground == true)
        {
            Speed -=  sin(degtorad(Angle)) * SlopeFactor;
        }
        
        // full stop when we're colliding a wall
        if (Speed &gt; 0 &amp;&amp; scrPlayerCollisionRight(x,y,Angle,maskBig))
        {
            Speed = 0;
        }
        if (Speed &lt; 0 &amp;&amp; scrPlayerCollisionLeft(x,y,Angle,maskBig))
        {
            Speed = 0;
        }        
        
        //--------------------- y movement ---------------------
        
        // check if the player is really on the Ground
        if (Ground == true &amp;&amp; scrPlayerCollisionBottom(x,y,Angle,maskBig) == false)
        {
            Ground      = false;
            Angle       = 0;
        }
        
        // check if for some reason the player has landed
        if (Gravity &gt;= 0 &amp;&amp; Ground == false &amp;&amp; scrPlayerCollisionBottom(x,y,Angle,maskBig) == true)
        {
            Ground      = true;
            Gravity     = 0;
                        
            // return to the normal state if the character was jumping
            if (Action == ActionJumping)
            {
                Action = ActionNormal;
            }
        }
        
        // check if we're on the air but we collided with the ceiling
        if (Gravity &lt; 0 &amp;&amp; Ground == false &amp;&amp; scrPlayerCollisionTop(x,y,Angle,maskBig) == true)
        {
            Gravity     = 0;
        }
        
        // and finally, if we aren't on the Ground, add the gravity to the Gravity
        if (Ground == false)
        {
            Gravity     += GravityForce;
        }
        
        //--------------------- Character Actions ---------------------
        
        scrPlayerMainActions();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // draw (we should round the x and y values in order to prevent the "thikering")
    draw_sprite(sprite_index,0,floor(x),floor(y));</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
