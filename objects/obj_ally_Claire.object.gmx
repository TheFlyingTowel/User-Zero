<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Ally_Updated_Claire_Front</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creat path Vars
path = path_add();
dis = 0;
A_img = .1
aspd = obj_player.spd -.1 ;
pnt = 30;
face = obj_player.face;
image_speed = A_img;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Movement 
if(instance_exists(obj_player)){
dis = point_distance(x,y, obj_player.x,obj_player.y);
face = obj_player.face;
mx = 0;
my = 0;
var walls = instance_number(obj_wall)*dis div room_speed;
lsatx = obj_player.phy_position_xprevious;
lasy = obj_player.phy_position_yprevious;
last_dis = dis;
if(dis &gt; pnt){
switch(face){
case RIGHT:
mx = -25;
my = 0
depth =-y;
sprite_index = Updated_Claire_Right;
break;

case LEFT:
mx = 25;
my = 0;
depth = -y;
sprite_index = Spr_Ally_Updated_Claire_Left;
break;

case UP:
mx =0;
my = -25;
depth =-y;
sprite_index = Updated_Claire_Up
break;

case DOWN:
mx = 0;
my = 25;
depth = -y;
sprite_index = Spr_Ally_Updated_Claire_Front;
break;

}
}

if(dis &gt; pnt){
var d = 1
 px = (obj_player.x)+ mx
 py =  (obj_player.y) - my
 image_speed = A_img;
}else{
px = 0;
py =0;
image_index = 0;
}
if mp_grid_path(global.grid, path, x, y, px, py, 1){
          //  mp_potential_step_object(px,py,aspd,obj_wall);
             path_start(path, aspd, path_action_stop,true);
           
            }     
            
}else if(global.encounter == true){
instance_destroy();
} 
            //for room transfer
if(instance_exists(obj_sidefade)){
visible = false;
}else{visible = true;}









</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
